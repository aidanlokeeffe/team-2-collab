Assignment 6 Description (Group 2)

This program is a simple simulation of the reaction between gaseous ammonia and gaseous hydrogen chloride to produce ammonium chloride; symbolically,
    NH3(g) + HCl (g) NH4Cl (s).
Note that this choice of project was discussed with Professor Abraham and Logan in Discord.

Simulation Type and Rules
	Out of the three categories of simulation under one of which this assignment needs to fall, the best choice is to call this a rules-based system. 
	Although the inspiration for this project was boids, this itself is not a system of cellular automata, since the enactment of different rules takes place under different classes. 
	There are many rules; namely:
	1) If two particles of ammonia collide, then they always repel.
	2) If two particles of hydrogen chloride collide, then they always repel.
	3) If a particle of ammonia and a particle of hydrogen chloride collide, then:
		a) With 20% probability, they react to form ammonium chloride; or,
		b) With 80% probability, they repel.
	4) Upon formation, ammonium chlorides accelerates towards and passes through the bottom of the frame.
	5) All gaseous particles are bounded within the frame.

    Rule 3 is implemented because, in reality (provided we’re remembering our chemistry correctly!), there are at least three conditions that must be met for two particles of these 
	substances to interact chemically: (1) They must collide (or more precisely be in sufficient proximity for the electromagnetic force between ammonia’s free electron pair and 
	the exposed proton in the hydrogen chloride to become significant), (2) They must be oriented such that the free electron pair faces the proton, and (3) They must collide 
	with sufficient velocity to overcome any repulsive forces originating from other parts of the molecule. To simulate this much detail entails a lot of dot products 
	and cosine evaluations, which we predict would cause slowdown, and decide to be too hard for our purposes. Hence the probabilistic approach.

    Rule 4 is implemented because we only need visual confirmation that the reaction has occurred.

    Rule 5 prevents creating particles that will never interact, which would waste space in the particle arraylists.

Classes
    Button: Allows users to control inflow of a given particle type.
    GasPtcl: Parent class to NH3Ptcl and HClPtcl. Manages collision with the frame boundary.
    HClGas: An array-type class that manages all HCl particles present in the frame.
    HClPtcl: A gas particle with the HCl sprite.
    NH3Gas: An array-type class that manages all NH3 particles present in the frame.
    NH3Ptcl: A gas particle with the NH3 sprite.
    NH4ClBody: An array-type class that manages all NH4Cl particles present in the frame. Note that this specifically is not a gas, so we call it body to differentiate.
    NH4ClPtcl: A particle (not a gas particle) with the NH4Cl sprite. Has a method to fall out of the frame.

Unexpected Challenges / Possible Improvements

	1) We ran into problems removing particles from their respective arrayLists when they reacted. Since multiple loops were cycling through the arrayList, even though 
		one arrayList was fine, the other would go out of bounds and cause the program to crash. However, this error was fixed by changing the loop parameters.

	2) When a large number of particles is added, particles may on occasion pass through each other. This is because the program is having to check for many collisions in a small
		time frame. As many more are added, the computer is not always able to check all of the particles in that time frame and can occasionally miss one or two before they
		collide.
	
	3) Animations are parametrized by frameCount, which may be a contributing factor to the collision detection. Future projects should have some capacity for 
		timing events independently of frameCount.

Member Contributions

    Russell: 
	Russell created the methods pertaining to the collisions between particles 
	and the actions of each particle once a collision occurred. These class methods were
	HCLGas.collides(), NH3Gas.collides(), HCLGas.reacts(), 
	and NH4ClBody.formSolid(). The two collides() methods caused gas particles of
	the same type to rebound off of each other when they come into contact. This
	was done by testing if the distance between the particles was less than a 
	specified amount of pixels (in this case 20). The reacts() method is similar but tests collisions 
	between particles of different types. When two particles collide, it generates a
	random number between 0 and 100. If the number is 20 or less, the particles
	react and it removes them from the arrayList while generating a new instance
	of the NH4ClBody class using its formSolid() method.

    Angelo:
	Angelo provided a support role by implementing the extra credit portions of the assignment. 
	He created the button class and added the GUI that user uses in order to spawn in the particles
	of the simulation and additionally put together the animation video for the project and converted
	it into a .mp4 while keeping the original .mov so mac and windows users can both see the video.

    Aidan:
	Aidan wrote the rule set, and coded the class structure, the particle and gas/body class 
	constructors, the initial velocity assignment, and the animation methods. He also created
	the sprites using Piskel.  
	 

