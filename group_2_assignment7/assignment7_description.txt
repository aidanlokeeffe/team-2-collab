This is a tactical game called "Noble Souls". This is a two player game. The goal
is to eliminate all of your opponent's units.

I) The rules of play are:
(1) On a player's turn, they may select one unit, and move them to an available tile. A
tile is available if it is not water, it is not occupied, and it is within the 
units movement range.*
(2) If an enemy is within a unit's attack range, it may be attacked.
(3) A player may end their turn without moving, with moving but without attacking,
vice versa, or with moving and with attacking.
(4) Each unit can attack once per turn.
(5) If a unit's health drops to zero, then the unit is eliminated.
(6) When you have eliminated all of your opponent's units, you win. This is the 
end game condition.

II) The user inputs are:
(1) A unit may be selected with the mouse.
(2) A unit may be moved with the mouse.
(3) A player may select an enemy unit adjacent to their unit to attack via the gui on the right-hand side of the screen.
(4) A player ends their turn by clicking the end turn button.
(5) Either player may mute or unmute the sound using the button on the gui.
(6) A highlighted cursor follows the unit's mouse along the map.

III) Member Contributions:
Russell Dickerson: Russell was responsible for the units themselves, for creating the art, 
for composing the music, and for implementing attacking for units and the combat forecast interface.
Methods that Russell wrote include: (1) all display and constructor methods under unit classes, 
(2) overButton, isMuted, update, and display methods in the Music class, (3) checkForEnemies, displayCombat,
displayAttackButton, overAttackButton, combatForecast, attack, die, and the constructor for the Unit Class.
Methods Russell helped out with were availableTiles in the Graph class, and the update and overtile in the 
Node class. Additionally, Russell created the music for the game, and made all of the sprites and their
animations, including the tile sprites for the map.

Angelo Gomez:

Aidan O'Keeffe: Aidan was broadly responsible for implementing the board. 
Particular methods which Aidan either wrote or to which he was a contributor 
include: (1) under Graph: constructor, setNodes, setEdges, addEdge, 
hasVertex, getAdjacentUnvisitedVertex, getIndex, and availableTiles, (2) under
Node: constructor, was visited, isOccupied, getLabel, getCoords, and display,
(3) under Unit: constructor and Move, and (4) under Player, constructor and
display.

IV) Extensions and Improvements:
(1) The availableTiles method is inherently flawed in its use of depth-first
search rather than breadth-first search. There is also some difficult in finding
the widest possible range of tiles due to the large number of cycles in the 
board graph. A major imporvement would be to change the algorithm used in 
availableTiles.
*(2) There is a bug where selecting the tile immediately above a previously 
selected tile does not deselect the previous tile. The player has to click another tile to deselect this particular 
tile.
(3) The emphasize that units can jump over each other, they should trace out an
arc between their current tile and the target tile. 
(4) The game would benefit from a title screen, a pause screen, and more maps.
(5) The game would also benefit from more sound effects.